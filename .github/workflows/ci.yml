name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  # Lint and Format Check
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

  # Smart Contracts Tests
  contracts:
    name: Smart Contracts Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        working-directory: ./contracts

      - name: Compile contracts
        run: npm run compile
        working-directory: ./contracts

      - name: Run tests
        run: npm test
        working-directory: ./contracts

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: contracts-coverage
          path: contracts/coverage

  # Backend Tests
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: Generate Prisma Client
        run: npx prisma generate
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run database migrations
        run: npx prisma db push
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Build
        run: npm run build
        working-directory: ./backend

      - name: Run tests
        run: npm test
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          NODE_ENV: test

  # Frontend Build & Tests
  frontend:
    name: Frontend Build & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Type check
        run: npm run type-check
        working-directory: ./frontend

      - name: Build
        run: npm run build
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_CHAIN_ID: 41338
          NEXT_PUBLIC_RPC_URL: https://testnet-rpc.attelyx.io
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_FACTORY_ADDRESS: "0x0000000000000000000000000000000000000000"
          NEXT_PUBLIC_EXPLORER_URL: https://testnet-explorer.attelyx.io

      - name: Run tests
        run: npm test -- --passWithNoTests
        working-directory: ./frontend

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Success notification
  success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, contracts, backend, frontend, security]
    if: success()

    steps:
      - name: Success message
        run: echo "âœ… All CI checks passed successfully!"

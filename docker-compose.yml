version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dao-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: dao_user
      POSTGRES_PASSWORD: dao_password
      POSTGRES_DB: dao_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dao_user -d dao_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching - optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: dao-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: dao-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://dao_user:dao_password@postgres:5432/dao_platform
      REDIS_URL: redis://redis:6379
      # Blockchain config (update with your values)
      RPC_URL: ${RPC_URL:-https://testnet-rpc.attelyx.io}
      FACTORY_ADDRESS: ${FACTORY_ADDRESS:-0x0000000000000000000000000000000000000000}
      START_BLOCK: ${START_BLOCK:-0}
      # CORS
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/dist
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: dao-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: development
      # Public env vars
      NEXT_PUBLIC_CHAIN_ID: ${NEXT_PUBLIC_CHAIN_ID:-41338}
      NEXT_PUBLIC_RPC_URL: ${NEXT_PUBLIC_RPC_URL:-https://testnet-rpc.attelyx.io}
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_FACTORY_ADDRESS: ${NEXT_PUBLIC_FACTORY_ADDRESS:-0x0000000000000000000000000000000000000000}
      NEXT_PUBLIC_EXPLORER_URL: ${NEXT_PUBLIC_EXPLORER_URL:-https://testnet-explorer.attelyx.io}
      NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hardhat node (local blockchain for testing)
  hardhat:
    build:
      context: ./contracts
      dockerfile: Dockerfile.dev
    container_name: dao-hardhat
    restart: unless-stopped
    ports:
      - "8545:8545"
    volumes:
      - ./contracts:/app
      - /app/node_modules
    command: npx hardhat node --hostname 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "-H", "Content-Type: application/json", "-d", "{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}", "http://localhost:8545"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: dao-network
